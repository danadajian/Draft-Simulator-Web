{"map":"{\"version\":3,\"sources\":[\"/Users/dadajian/Documents/Fantasy-Draft-Simulator/frontend/node_modules/file-loader/dist/cjs.js??ref--6-oneOf-7!/Users/dadajian/Documents/Fantasy-Draft-Simulator/frontend/src/logo.svg\",\"/Users/dadajian/Documents/Fantasy-Draft-Simulator/frontend/src/PlayerList.js\",\"/Users/dadajian/Documents/Fantasy-Draft-Simulator/frontend/src/App.js\",\"/Users/dadajian/Documents/Fantasy-Draft-Simulator/frontend/src/serviceWorker.js\",\"/Users/dadajian/Documents/Fantasy-Draft-Simulator/frontend/src/index.js\"],\"names\":[\"module\",\"exports\",\"__webpack_require__\",\"p\",\"options\",\"label\",\"value\",\"PlayerList\",\"_this\",\"this\",\"react_default\",\"a\",\"createElement\",\"className\",\"build\",\"selected\",\"state\",\"onChange\",\"setState\",\"Component\",\"App\",\"src\",\"logo\",\"alt\",\"src_PlayerList\",\"window\",\"token\",\"Boolean\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App_0\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,iQCIlCC,SAAU,CACd,CAACC,MAAM,MAAOC,MAAO,GACrB,CAACD,MAAM,MAAOC,MAAO,GACrB,CAACD,MAAM,QAASC,MAAO,KAmBVC,mLAfF,IAAAC,EAAAC,KACL,OACIC,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,cACXH,EAAAC,EAAAC,cAACE,EAAA,QAAD,CACIV,QAASA,EACTW,SAAUN,KAAKO,MAAMD,SACrBE,SAAU,SAACF,GACPP,EAAKU,SAASH,cARbI,EAAAA,WCYVC,mLAfX,OACEV,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,SAAA,CAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,MAAA,CAAKS,IAAKC,EAAAA,EAAMT,UAAU,WAAWU,IAAI,SACzCb,EAAAC,EAAAC,cAAA,MAAA,KACEF,EAAAC,EAAAC,cAACY,EAAD,OAEAd,EAAAC,EAAAC,cAAA,IAAA,KAAA,cAAea,OAAOC,gBAThBP,EAAAA,WCOEQ,QACW,cAA7BF,OAAOG,SAASC,UAEe,UAA7BJ,OAAOG,SAASC,UAEhBJ,OAAOG,SAASC,SAASC,MACvB,2DCZNC,EAAAA,EAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC\",\"sourcesContent\":[\"module.exports = __webpack_public_path__ + \\\"media/logo.5d5d9eef.svg\\\";\",\"import React, { Component } from 'react';\\nimport ListBox from 'react-listbox';\\nimport 'react-listbox/dist/react-listbox.css';\\n\\nconst options = [\\n  {label:'One', value: 1},\\n  {label:'Two', value: 2},\\n  {label:'Three', value: 3}\\n];\\n\\nclass PlayerList extends Component {\\n    render() {\\n        return(\\n            <div className=\\\"PlayerList\\\">\\n                <ListBox\\n                    options={options}\\n                    selected={this.state.selected}\\n                    onChange={(selected) => {\\n                        this.setState(selected)\\n                    }}\\n                    />\\n            </div>\\n        )\\n    }\\n}\\n\\nexport default PlayerList;\\n\",\"import React, { Component } from 'react';\\nimport logo from './logo.svg';\\nimport './App.css';\\nimport PlayerList from './PlayerList';\\n\\nclass App extends Component {\\n  render() {\\n    return (\\n      <div className=\\\"App\\\">\\n        <header className=\\\"App-header\\\">\\n          <img src={logo} className=\\\"App-logo\\\" alt=\\\"logo\\\" />\\n          <div>\\n            <PlayerList/>\\n          </div>\\n            <p>My Draft = {window.token}</p>\\n\\n        </header>\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default App;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: https://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{11:function(e,t,n){e.exports=n.p+\"media/logo.5d5d9eef.svg\"},13:function(e,t,n){e.exports=n(27)},19:function(e,t,n){},20:function(e,t,n){},27:function(e,t,n){\"use strict\";n.r(t);var a=n(0),o=n.n(a),r=n(10),c=n.n(r),l=(n(19),n(2)),i=n(3),s=n(5),u=n(4),d=n(6),m=n(11),p=n.n(m),h=(n(20),n(12)),f=(n(26),[{label:\"One\",value:1},{label:\"Two\",value:2},{label:\"Three\",value:3}]),b=function(e){function t(){return Object(l.a)(this,t),Object(s.a)(this,Object(u.a)(t).apply(this,arguments))}return Object(d.a)(t,e),Object(i.a)(t,[{key:\"render\",value:function(){var e=this;return o.a.createElement(\"div\",{className:\"PlayerList\"},o.a.createElement(h.default,{options:f,selected:this.state.selected,onChange:function(t){e.setState(t)}}))}}]),t}(a.Component),v=function(e){function t(){return Object(l.a)(this,t),Object(s.a)(this,Object(u.a)(t).apply(this,arguments))}return Object(d.a)(t,e),Object(i.a)(t,[{key:\"render\",value:function(){return o.a.createElement(\"div\",{className:\"App\"},o.a.createElement(\"header\",{className:\"App-header\"},o.a.createElement(\"img\",{src:p.a,className:\"App-logo\",alt:\"logo\"}),o.a.createElement(\"div\",null,o.a.createElement(b,null)),o.a.createElement(\"p\",null,\"My Draft = \",window.token)))}}]),t}(a.Component);Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));c.a.render(o.a.createElement(v,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[13,1,2]]]);","extractedComments":[]}